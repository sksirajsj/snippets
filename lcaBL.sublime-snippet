<snippet>
	<content><![CDATA[
vector<vector<ll>> g,parent;
vector<ll> depth;

void dfs(ll node,ll par,ll dep)
{
    parent[node][0] = par;
    depth[node] = dep;
    for(ll i=1;i<=20;i++)
        parent[node][i] = parent[parent[node][i-1]][i-1];
    for(auto v:g[node])
    {
        if(v!=par)
        {
            dfs(v,node,dep+1);
        }
    }
}

ll lca(ll u,ll v)
{
    if(depth[u]<depth[v])
        swap(u,v);
    for(ll i=20;i>=0;i--)
    {
        if((depth[u]-depth[v]) & (1LL<<i))
        {
            u = parent[u][i];
        }
    }

    if(u==v)return u;

    for(ll i=20;i>=0;i--)
    {
        if(parent[u][i]!=parent[v][i])
        {
            u = parent[u][i];
            v = parent[v][i];
        }
    }

    return parent[u][0];
}

void solve()
{
    ll n,a,b;
    cin>>n;
    g.clear();
    g.resize(n+1);
    depth.clear();
    depth.assign(n+1,0);
    for(ll i=0;i+1<n;i++)
    {
        cin>>a>>b;
        g[a].pb(b);
        g[b].pb(a);
    }
    parent.clear();
    parent.resize(n+1);
    for(ll i=0;i<=n;i++)
    {
        for(ll j = 0;j<=20;j++)
        {
            parent[i].pb(0);
        }
    }
    dfs(1,0,0);
}

int main()
{
    solve();
    //if solve is called,parent ,depth,vectors will be ready to use..
    //Lca too
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LCA-BL</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
